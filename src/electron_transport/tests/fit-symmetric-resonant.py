# This file is a part of MolStat, which is distributed under the Creative
# Commons Attribution-NonCommercial 4.0 International Public License.
# MolStat (c) 2014, Northwestern University.

##
 # @file tests/fit-symmetric-resonant.py
 # @brief Test suite for fitting to the symmetric, resonant-tunneling model.
 # 
 # @test Test suite for fitting to the symmetric, resonant-tunneling model.
 #
 # The data in symmetric-nonresonant.dat was generated by the simulator with
 # the following input
 # @verbatim
 # SymmetricOneSite
 # DifferentialConductance
 # 100000
 # 100 linear
 # EF constant 0.
 # V constant 0.
 # epsilon normal 0. 0.05
 # gamma normal 0.5 0.05
 # a constant 0.
 # @endverbatim
 # Note that bins with zero counts were deleted from the histogram (they cause
 # numerical problems when fitting to the SymmetricResonantFitModel).
 #
 # @author Matthew G.\ Reuter
 # @date November 2014

import subprocess
import math

## @cond

process = subprocess.Popen('../../molstat-fitter', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
output = process.communicate( \
'SymmetricResonant\n' \
'symmetric-resonant.dat\n' \
'guess default\n' \
'guess gamma 40. norm 1000.\n' \
'noprint')

# make sure no errors were reported
assert(output[1] == '')

# check the output string
tokens = output[0].split()
assert(tokens[0] == 'Resid')
assert(tokens[1] == '=')
assert(math.fabs(float(tokens[2]) - 3.93) < 1.e-2) # check the residual

# check gamma
gammaline = tokens[3].split('=')
assert(gammaline[0] == 'gamma')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(gammaline[1][:-1]) - 10.) / 10. < 5.e-2) # 5% relative error

# check norm
normline = tokens[4].split('=')
assert(normline[0] == 'norm')
assert(math.fabs(float(normline[1]) - 890.) / 890. < 5.e-2) # 5% relative error

## @endcond
