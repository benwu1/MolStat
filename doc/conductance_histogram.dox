/**
\page page_conductance_histograms Molecular Conductance: Conductance Histograms

This chapter deals with using MolStat to simulate and fit conductance
histograms. We begin with the theory behind molecular conductance, introduce
conductance histograms, and then detail the software interface and features.

\section sec_landauer Landauer Theory
All of the tools are based on the Landauer-B&uuml;ttiker-Imry theory of
conductance through quantum systems \cite buttiker-6207, \cite imry-s306.
Within this theory, the zero-temperature current is given as
\f[
I(V) = \frac{2e}{h} \int\limits_{E_\mathrm{F} + (\eta-1)eV}^{E_\mathrm{F} + \eta eV} \mathrm{d}E T(E),
\f]
where
   - \f$I\f$ is the current,
   - \f$V\f$ is the applied bias,
   - \f$E_\mathrm{F}\f$ is the Fermi energy of the system,
   - \f$\eta\f$ is the relative voltage drop at the two electrodes, \f$0\le\eta\le1\f$,
   - \f$E\f$ is the incident energy of the electron,
   - \f$T(E)\f$ is the transmission function.
   .
The transmission function depends on the specific model and system used, and
gives the aggregate transmission probability for an electron with energy
\f$E\f$ to tunnel from one electrode to the other.

Several types of conductance can be considered:
   -# Zero-bias conductance
      \f[ \left. \left( \frac{\partial}{\partial V} I(V) \right) \right|_{V=0} = \frac{2e^2}{h} T(E_\mathrm{F}). \f]
   -# Differential conductance
      \f[ \frac{\partial}{\partial V} I(V) = \frac{2e^2}{h} \left[ \eta T(E_\mathrm{F} + \eta eV) + (1-\eta) T(E_\mathrm{F}+(\eta-1)eV) \right] + \frac{2e}{h} \int\limits_{E_\mathrm{F}+(\eta-1)eV}^{E_\mathrm{F}+\eta eV} \mathrm{d}E \frac{\partial}{\partial V}T(E). \f]
	-# Static conductance
      \f[ \frac{I(V)}{V} = \frac{2e}{hV} \int\limits_{E_\mathrm{F}+(\eta-1)eV}^{E_\mathrm{F}+\eta eV} \mathrm{d}E T(E). \f]
   .
Various models (described below) can be used to calculate \f$T(E)\f$; from this
transmission, all of the above conductances can be calculated.

\section conductance_histograms Conductance Histograms
Conductance histograms are a common way for tabulating and analyzing
experimental data on electric conductance through nanometer-scaled systems
(i.e., systems where quantum mechanical effects are inherent). Introductions
to conductance histograms can be found in \cite krans-767,
\cite xu-1221, \cite venkataraman-458, and \cite reuter-2243. In essence, the
conductance through the system is measured many (thousands) of times, and the
conductance data is binned into a histogram.

In MolStat, we assume that the conductance histogram reports the probability
density function of the conductance observable \cite reuter-2243. As
described in the introduction and in Refs.\ \cite reuter-2243 and
\cite williams-5937, MolStat then regards the physical parameters in the
transmission as random variables that determine the conductance's probability
density function.

The two operations supported by MolStat are
-# Simulating conductance histograms using simple model systems (see
   \cite reuter-2243). This operation is described in
   \ref sec_cond_hist_simulate. Note that these model systems do not rely on
   first-principles electronic structure calculations; they are
   phenomenological. Other studies that construct histogram from such *ab
   initio* calculations have been reported in, for instance, \cite french-887.
-# Fit a conductance histogram (or, more accurately, a peak from a conductance
   histogram) to a specified functional form. This process is discussed in
   \ref sec_cond_hist_fit.

\section sec_cond_hist_simulate Simulating Conductance Histograms
The general procedure for simulating a conductance histogram is as follows.
Specify
- a model for calculating \f$T(E)\f$. Each model has several parameters, such
  as channel energies, channel-electrode couplings, etc.
- random distributions for each of these parameters. The available random
  number distributions are descibed below.
- how many bins to use in the histogram.
- the Fermi energy, the number of conductance points to simulate, and
  information on binning the conductance data into a histogram.
.
From this information, the simulator gets the requested number of conductance
values (where each value uses random model parameters from the
specified distributions), bins the conductance data, and, finally, outputs
the histogram to standard out.

Following is an example input file (routed to standard in). Note that the
line breaks are important.
\verbatim
SymmetricOneSiteModel
Differential
100000
100 log
0.
eta constant 0.5
V uniform -2. 2.
gamma normal 0.8 0.05
epsilon normal -6. 0.05
\endverbatim

The lines of this input file are interpreted as follows:
-# The model to use for calculating the transmission function and conductance.
-# The type of conductance to calculate. Must be `ZeroBias`, `Static`, or
   `Differential`.
-# The number of conductance data points to simulate.
-# The number of bins to use and the type of binning. For Static and
   Differential conductance histograms, the specified number of bins is used
   for both the voltage and conductance axes. The binning type must be `log`
   or `linear`, and specifies whether \f$\log_{10}(g)\f$ or \f$g\f$ is binned,
   respectively. The printed conductance values will be either
   \f$\log_{10}(g)\f$ or \f$g\f$.
-# The Fermi energy.
-# Random distributions (one per line) for the various parameters. For example,
   `eta constant 0.5` specifies the constant distribution (0.5) for \f$\eta\f$;
   that is, \f$\eta\f$ is always 0.5.

`ZeroBias` calculations do not require any parameters other than those
needed by the model. `Static` and `Differential` conductance calculations
also require distributions for `V` (\f$V\f$) and `eta` (\f$\eta\f$).

Finally, the histogram is output with one bin per line. For Static and
Differential conductance histograms each line is
\verbatim
V mask(g) counts
\endverbatim
where `mask` is either \f$mask(g)=g\f$ or \f$mask(g)=\log_{10}(g)\f$,
depending on the binning type. For ZeroBias conductance histograms, each line
similarly reads
\verbatim
mask(g) counts
\endverbatim

\subsection subsec_cond_hist_sim_models Models for Simulating Conductance
Finally, we list the implemented conductance models. Note that all of these
models are implemented by classes derived from ConductanceModel. Each of these
classes encapsulates not only the mathematical relationships described herein,
but also the random number distributions for the various model parameters. The
three abstract functions in ConductanceModel --
ConductanceModel::zero_bias_conductance, ConductanceModel::diff_conductance,
and ConductanceModel::static_conductance -- all generate a random set of model
parameters (from the distributions) and calculate the appropriate conductance.

- `SymmetricOneSiteModel`
   - Single-site model with symmetric site/lead couplings.
   - Implemented by the class SymmetricOneSiteModel; full details are presented
     there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling.

- `AsymmetricOneSiteModel`
   - Single-site model with asymmetric site/lead couplings.
   - Implemented by the class AsymmetricOneSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gammaL` (\f$\Gamma_\mathrm{L}\f$), the site/lead coupling for one electrode,
      - `gammaR` (\f$\Gamma_\mathrm{R}\f$), the site/lead coupling for the other electrode.

- `SymmetricVoltageOneSiteModel`
   - Single-site model with symmetric site/lead couplings and a voltage-dependent site-energy. It is very closely related to the SymmetricOneSiteModel above.
   - Implemented by the class SymmetricVoltageOneSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling.

- `SymmetricTwoSiteModel`
   - Two-site model with symmetric site/lead couplings.
   - Implemented by the class SymmetricTwoSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling,
      - `beta` (\f$\beta\f$), the inter-site coupling.

- `AsymmetricTwoSiteModel`
   - Two-site model with asymmetric site/lead couplings.
   - Implemented by the class AsymmetricTwoSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gammaL` (\f$\Gamma_\mathrm{L}\f$), the site/lead coupling for one electrode,
      - `gammaR` (\f$\Gamma_\mathrm{R}\f$), the site/lead coupling for the other electrode,
      - `beta` (\f$\beta\f$), the inter-site coupling.

- `SymmetricVoltageTwoSiteModel`
   - Two-site model with symmetric site/lead couplings and voltage-dependent site-energies.
   - Implemented by the class SymmetricVoltageTwoSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling,
      - `beta` (\f$\beta\f$), the inter-site coupling.

\subsubsection subsubsec_add_conductance_model Adding Conductance Models
Adding a conductance model is designed to be straightforward, requiring the
following steps.
-# Derive a class from ConductanceModel, implementing the ConductanceModel::static_conductance, ConductanceModel::diff_conductance, and ConductanceModel::zero_bias_conductance member functions. As a side note, these three functions may use the transmission function, or other model-specific functions, which are implemented as static member functions of the derived class (as needed).
-# Add a case for the new model in the ::make_model function. This block of code should check that all necessary random number distributions are specified and properly route them to the ConductanceModel. Finally, the case returns a shared pointer to the ConductanceModel. The implemented cases should provide sufficient examples. Note that the name of the model should be in lowercase.
-# Add a note to the end of the ::make_model function so that (minimal) runtime support is present.


*/
