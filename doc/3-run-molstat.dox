/* This file is a part of MolStat, which is distributed under the Creative
   Commons Attribution-NonCommercial 4.0 International Public License.

   (c) 2014 Northwestern University. */

/**
\page page_run_molstat Running MolStat

This chapter deals with using MolStat to simulate or fit single-molecule data. The frameworks for these two operations are discussed in turn.

\section sec_molstat_simulate Simulating Single-Molecule Behavior

Simulating single-molecule behavior uses a physical model and random number distributions to calculate the statistics of many single-molecule measurements. The `molstat-simulator` program reads in all of the required information from an input file and outputs a simulated histogram from the specified distributions.

`molstat-simulator` operates under the idea of pairing models with observables. The input file specifies a model to use, observables to calculate, histogram information, and the random number distributions behind each physical parameter. The distinction between the model and observable facilitates code reuse as one physical model may work with multiple observables. Of course, the models and observables depend on the application.
\if fullref
As will be described in much more detail in \ref subsec_add_simulate_model, simulator models are described by the molstat::SimulateModel class; observables (see \ref subsec_add_simulate_observable) are identified with the molstat::Observable template.
\endif

Each line of a `molstat-simulator` input file issues a command to the program. Although only one command can be read from a line, the order of the commands does not matter. Commands are
- `trials` -- The number of systems to simulate for constructing the histogram. Usage:
\verbatim
trials ntrials
\endverbatim
where `ntrials` is the number of systems.

- `output` -- Output file for the histogram. Log messages will be displayed on standard out. Usage:
\verbatim
output filename
\endverbatim
where `filename` is the name of the output file. If the file exists, its contents will be overwritten. Defaults to `histogram.dat` if unspecified.

- `observable` -- Specify an observable. `observable_x` and `observable_y` can also be used to specify the axis (x or y) for the particular observable. `observable` and `observable_x` are equivalent. Usage:
\verbatim
observable name nbin binstyle
\endverbatim
where `name` is the name of the observable, `nbin` is the number of histogram bins to use for this observable, and `binstyle` is the binning style (see \ref sec_histograms).

- `model` -- Specify a model to use. Unlike the other commands, `model` begins a block that ends with `endmodel`. On the same line as the `model` command, the name of the model must be specified. Each subsequent line in the model block must issue one of the following commands
   - `distribution` -- Specify the random distribution for one of this model's physical parameters. Usage:
   \verbatim
   distribution parameter-name distribution-name distribution-details
   \endverbatim
   where `parameter-name` is the name of the parameter, (as specified by the model), `distribution-name` is the name of the random distribution, and `distribution-details` are the distribution's parameters. Information on the random distributions can be found in \ref sec_rng.
   - `model` -- Same command and usage as above. This model is a submodel nested within the higher-level model. (Only some models---called composite models---support submodels).
   .
A `model` block will look something like
\verbatim
model model-name
   distribution ...
   distribution ...
   model submodel-name
      ...
   endmodel
endmodel
\endverbatim
Only one top-level model command can be specified; however, multiple submodels may be specified at any level.
.

A few notes regarding the input lines and MolStat behavior.
- If the specified model (and/or any submodels) is incompatible with the desired observable, MolStat will print an error message and exit without simulating data.
- Regardless of the binning style(s) used, the output value(s) will be unmasked by the binning style. That is, the output estimates \f$P_{\hat{x}}(x)\f$ instead of the masked value.

Following is an example input file for simulating a conductance histogram (see \ref page_conductance_histograms). The input file must be routed to standard in.
\verbatim
observable DifferentialConductance 100 log 10.
trials 100000
output my-histogram.dat
model TransportJunction
   distribution ef constant 0.
   distribution V uniform -2. 2.
   model SymmetricOneSiteChannel
      distribution gamma normal 0.8 0.05
      distribution epsilon normal -6. 0.05
      distribution a constant 0.
   endmodel
endmodel
\endverbatim
\if fullref
Additional example inputs can be found in the tests; see, for example, fit-asymmetric-resonant.py, fit-symmetric-nonresonant.py, and/or fit-symmetric-resonant.py.
\elseif userman
Additional example inputs can be found in the tests.
\endif

Finally, the histogram is output with one bin per line. A two-dimensional histogram is generally output, where each line is
\verbatim
x y counts
\endverbatim
Depending on the random distributions, model, and observable, however, only a one-dimensional histogram may be output. In this case, each line similarly reads
\verbatim
x counts
\endverbatim

\if fullref
Information on adding models and observables can be found in the \ref subsec_add_simulate_model and \ref subsec_add_simulate_observable sections, respectively.
\endif

\section sec_cond_hist_fit Fitting Single-Molecule Behavior
The general procedure for fitting single-molecule data is as follows. Specify
- a model (line shape) to fit the single-molecule data to. Each model has at least one fitting parameter.
- the name of a file containing the single-molecule data.
- additional options (if desired; none are required).

From this information, the fitter reads in the single-molecule data and uses the GSL's non-linear least-squares routines to fit the data to the desired line shape. Because non-linear least-squares fits are not guaranteed to find the best-fit solutions, we use multiple initial guesses and report the best fit across all guesses. This still doesn't guarantee the best fit, but seems to work well, in practice.

A `molstat-fitter` input file has the following structure. The line breaks are important, and the text (excluding the file name) is not case sensitive.
-# The model to use when fitting the single-molecule data.
-# The name of the file containing the data. All fitting models (so far) are one-dimensional data. The file should have two numbers per line: the value of the observable, and the probability density function for this value.
-# All following lines are optional and have the form `command options`. The commands, and any options they require, are
   - `noprint` (recommended; default) -- only output the best fit parameters at the end of the program.
   - `print` -- output iteration-by-iteration results for all initial guesses. This can produce a large amount of output.
   - `guess` -- specify initial guess(es) to use. Multiple `guess` commands may be present.
     - `guess default` -- load a \"default\" set of initial guesses for the model. If no other initial guesses are specified, these initial guesses will be automatically loaded. This command may be present with other user-specified initial guesses to use both the user-specified and default sets.
     - `guess name value ...` -- add a specific initial guess. After the `guess` command is a list of `name`/`value` pairs. Each fit parameter (remember that fit parameters depend on the model) must be given an initial value, excepting the \"norm\" parameter, \f$N\f$. (\f$N\f$ can be specified, though.) All name/value pairs should appear on the same line. An example of this syntax is shown in the following example input file.
   - `bin` -- specify the binning status of the data to be read in. If the data is in `g counts` form (as is produced by `molstat-simulator`), use `bin linear`. If no `bin` command is issued, `linear` is the default. See \ref subsec_impl_binstyle for a list of implemented binning types. Note that the use of non-`linear` binning styles is provided for cases where the user may want to fit data that is not produced by `molstat-simulator` and was binned, e.g., logarithmically without converting back to \f$g\f$. In this case, the histogram would estimate \f$P_{\ln(\hat{g})}(\ln(g))\f$, not \f$P_{\hat{g}}(g)\f$; the fitter needs to account for this disparity.
   - `maxiter` -- specify the maximum number of iterations (per initial guess) in the non-linear fitting routine.
   .
.

Following is an example input file.
\verbatim
SymmetricNonresonant
1,4-dithiolbenzene.dat
noprint
guess c 50. d 6. norm 10.
guess default
bin linear
\endverbatim
\if fullref
Additional example inputs can be found in the tests; see fit-asymmetric-resonant.py, fit-symmetric-nonresonant.py, and/or fit-symmetric-resonant.py.

Information on adding fitter models can be found in \ref sec_add_fit_model.
\elseif userman
Additional example inputs can be found in the tests.
\endif
*/
