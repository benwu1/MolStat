/**
\page page_fit Fitting Conductance Histograms

\todo Perhaps add a section on binning styles.

The general procedure for fitting a conductance histogram is as follows.
Specify
- a model line shape to fit against the conductance histogram. Each model has
several parameters, as detailed below.
- a file name containing the conductance histogram data.
- output options.

From this information, the fitter reads in the conductance histogram and uses
GSL's non-linear least-squares routines to fit the histogram to the desired
line shape. Because non-linear least-squares fits are not guaranteed to find
the best-fit solutions, we use multiple initial guesses and report the best
fit across all guesses. This still doesn't guarantee the best fit, but seems to
work well, in practice.

\todo Add a mechanism for additional input guesses to be specified in the input deck.

Following is an example input file.
\verbatim
SymmetricNonresonant
1,4-dithiolbenzene.dat
noprint
\endverbatim

The lines are interpreted as follows.
-# The model to use when fitting the conductance histogram.
-# The data file containing the conductance histogram. All fitting models (so
   far) are for 1-D histograms. The file should have two numbers per line: the
   conductance, and the histogram counts in this bin.
-# Output options.
   - `noprint` (recommended) -- only output the best fit parameters at the end
     of the program.
   - `print` -- output iteration-by-iteration results for all starting guesses.

\section implemented_fits Implemented Fitting Models
We now list the implemented models for fitting conductance histograms. Note
that all of these models are implemented by classes derived from `FitModel`.
`FitModel` handles most all of the interface to the GSL routines, leaving only
the model-dependent details to the specific subclass.
- `SymmetricNonresonantFitModel`
   - Nonresonant tunneling through a single channel that is symmetrically
     connected to the two leads. This model was derived with electron transport
     through molecules in mind.
   - Implemented by the class SymmetricNonresonantFitModel; full details are
     presented there.
   - Fitting parameters are
       - \f$c\f$, the average level alignment relative to the standard deviation
         in channel-electrode coupling.
       - \f$d\f$, the average channel-electrode coupling relative to its
         standard deviation.
       - \f$ N \f$, a scale parameter (since the histogram is probably
         unnormalized).
   - Fits may be unreliable if the conductance histogram peak occurs at
     \f$ g \gtrsim 0.01 \f$ \f$\mathrm{G}_0\f$.
   - Detailed in \cite williams-5937.

- `SymmetricResonantFitModel`
   - Resonant tunneling through a single channel that is symmetrically
     connected to the two leads.
   - Implemented by the class SymmetricResonantFitModel; full details are
     presented there.
   - Fitting parameters are
       - \f$ \gamma \f$, the average channel-electrode coupling relative to the
         standard deviation in the level alignment.
       - \f$ N \f$, a scale parameter (since the histogram is probably
         unnormalized).
   - Detailed in \cite williams-5937.

- `AsymmetricResonantFitModel`
   - Resonant tunneling through a single channel that is asymmetrically
     connected to the two leads.
   - Implemented by the class AsymmetricResonantFitModel; full details are
     presented there.
   - Fitting parameters are
       - \f$ \gamma_\mathrm{L} \f$, the average coupling to one electrode
         relative to the standard deviation in the couplings.
       - \f$ \gamma_\mathrm{R} \f$, the average coupling to the other
         electrode relative to the standard deviation in the couplings.
       - \f$ r \f$, the standard deviaton of the coupling relative to the
         standard deviation of the level alignment.
       - \f$ N \f$, a scale parameter (since the histogram is probably
         unnormalized).
   - Fits are somewhat insensitive to \f$r\f$.
   - The order of \f$\Gamma_\mathrm{L}\f$ and \f$\Gamma_\mathrm{R}\f$ is
     arbitrary.
   - Detailed in \cite williams-5937.

\subsection add_fit_models Adding Fitting Models
Addition a model to fit against is designed to be straightforward. First, we
describe the general steps of non-linear fitting and then outline how to add
a model.

Non-linear fitting a really an optimization process. Suppose our observed data
set is \f$\{g_j, p_j\}\f$; perhaps, as is the case for 1D conductance
histograms, \f$j\f$ is a bin, \f$g_j\f$ is the conductance of that bin, and
\f$p_j\f$ is the bin count. We ultimately seek to minimize a functional such
as \f[ r(\{g_j, p_j\}; \{x_k\}) = \sum_j \left| f(g_j; \{x_k\}) - p_j \right|^2, \f] where
\f$f\f$ is the fit function and \f$\{ x_k \}\f$ are the fitting parameters.

Much of the fitting procedure is handled internally by the GSL, and the
`FitModel` class contains even more common operations. Ultimately, to implement
a new model,
-# Derive a class from FitModel, implementing the FitModel::resid and
   FitModel::jacobian member functions. FitModel::resid calculates the
   component in \f$r\f$ for a particular data point \f$g_j\f$ and \f$p_j\f$.
   Similarly, FitModel::jacobian calculates the Jacobian at the specific data
   point, where the Jacobian is the vector of \f$\partial r / \partial x_k\f$
   derivatives.
-# If the functional form and/or its Jacobian are expensive to calculate, you
   may wish to override the FitModel::resid_j function, which evaluates the
   residual and Jacobian together. The default provided by FitModel simply
   calls the subclass's `resid` and `jacobian` functions.
-# Implement the member function FitModel::initial_guesses, which populates
   a vector of initial guesses to use for fitting the data. The fit will be
   performed for each initial guess, and the best fit will be output at the
   end.
-# Implement the member function FitModel::print_fit, which prints a set of
   fitting parameters to the specified output stream.
-# If deemed necessary, override the FitModel::process_fit_parameters, which
   \"cleans\" up the parameters. For instance, the \f$\gamma\f$ parameter in
   the SymmetricResonantFitModel may be mathematically positive or negative
   (the fit function only depends on \f$\gamma^2\f$), but physically it should
   be positive. This function ensures that, in this example, \f$\gamma>0\f$.
-# Add the model, using an input name, to the get_fit_model function. Also
   consider adding a note to the error message so as to provide (minimal)
   runtime support.
*/
