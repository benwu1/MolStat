/**
\page page_simulate Simulating Conductance Histograms

\section sec_landauer Landauer Theory
All of the simulators are based on the Landauer-B&uuml;ttiker-Imry theory of
conductance through quantum systems \cite buttiker-6207, \cite imry-s306.
Within this theory, the zero-temperature current is given as
\f[
I(V) = \frac{2e}{h} \int\limits_{E_\mathrm{F} + (\eta-1)eV}^{E_\mathrm{F} + \eta eV} \mathrm{d}E T(E),
\f]
where
   - \f$I\f$ is the current,
   - \f$V\f$ is the applied bias,
   - \f$E_\mathrm{F}\f$ is the Fermi energy of the system,
   - \f$\eta\f$ is the relative voltage drop at the two electrodes, \f$0\le\eta\le1\f$,
   - \f$E\f$ is the incident energy of the electron,
   - \f$T(E)\f$ is the transmission function.
   .
The transmission function depends on the specific model and system used, and
gives the aggregate transmission probability for an electron with energy
\f$E\f$ to tunnel from one electrode to the other.

Several types of conductance can be considered:
   -# Zero-bias conductance
      \f[ \left. \left( \frac{\partial}{\partial V} I(V) \right) \right|_{V=0} = \frac{2e^2}{h} T(E_\mathrm{F}). \f]
   -# Differential conductance
      \f[ \frac{\partial}{\partial V} I(V) = \frac{2e^2}{h} \left[ \eta T(E_\mathrm{F} + \eta eV) + (1-\eta) T(E_\mathrm{F}+(\eta-1)eV) \right] + \frac{2e}{h} \int\limits_{E_\mathrm{F}+(\eta-1)eV}^{E_\mathrm{F}+\eta eV} \mathrm{d}E \frac{\partial}{\partial V}T(E). \f]
	-# Static conductance
      \f[ \frac{I(V)}{V} = \frac{2e}{hV} \int\limits_{E_\mathrm{F}+(\eta-1)eV}^{E_\mathrm{F}+\eta eV} \mathrm{d}E T(E). \f]
   .
Various models (described below) are used to calculate \f$T(E)\f$; from this
transmission, all of the above conductances can be calculated.

\section sec_running_simulator Running the Simulator
The general procedure for simulating is as follows. Specify
   - a model for calculating \f$T(E)\f$. Each model has several parameters,
     such as channel energies, channel-electrode couplings, etc.
   - random distributions for each of these parameters. The available random
     number distributions are descibed below.
   - how many bins to use in the histogram.
   - the Fermi energy, the number of conductance points to simulate, and
     information on binning the conductance data into a histogram.
   .
From this information, the simulator gets the requested number of conductance
values (where each value uses random model parameters from the
specified distributions), bins the conductance data, and, finally, outputs
the histogram to standard out.

Following is an example input file (routed to standard in). Note that the
line breaks are important.
\verbatim
SymmetricOneSiteModel
Differential
100000
100 log
0.
eta constant 0.5
V uniform -2. 2.
gamma normal 0.8 0.05
epsilon normal -6. 0.05
\endverbatim

The lines are interpreted as follows:
   -# The model to use for calculating the transmission function and
      conductance.
   -# The type of conductance to calculate. Must be `ZeroBias`, `Static`,
      or `Differential`.
   -# The number of conductance data points to simulate.
	-# The number of bins to use and the type of binning. For Static and
      Differential conductance histograms, the specified number of bins is used
      for both the voltage and conductance axes. The binning type must be `log`
      or `linear`, and specifies whether \f$\log_{10}(g)\f$ or \f$g\f$ is
      binned, respectively. The printed conductance values will be either
		\f$\log_{10}(g)\f$ or \f$g\f$.
   -# The Fermi energy.
   -# Random distributions (one per line) for the various parameters. For
      example, `eta
      constant 0.5` specifies the constant distribution (0.5) for \f$\eta\f$; that
      is, \f$\eta\f$ is always 0.5.

`ZeroBias` calculations do not require any parameters other than those
needed by the model. `Static` and `Differential` conductance calculations
also require distributions for `V` (\f$V\f$) and `eta` (\f$\eta\f$).

Finally, the histogram is output with one bin per line. For Static and
Differential conductance histograms each line is
\verbatim
V mask(g) counts
\endverbatim
where `mask` is either \f$mask(g)=g\f$ or \f$mask(g)=\log_{10}(g)\f$,
depending on the binning type. For ZeroBias conductance histograms, each line
similarly reads
\verbatim
mask(g) counts
\endverbatim

\section sec_rng Random Number Distributions
Random number distributions are key to the simulator. For versatility, we
have an abstract notion of random number distributions, allowing models to be
combined with various distributions. In this section we list the implemented
random number distributions, along with how each one is used in the input file.

All random number distributions have a common syntax:
\verbatim
variable-name distribution [distribution-parameters]
\endverbatim
where
   - `variable-name` is the name of the model variable.
   - `distribution` is the name of the distribution (see below).
   - `[distribution-parameters]` are the parameter(s) required by the specified
     distribution.

The implemented random distributions are
   - Constant distribution: \f$ P(x) = \delta(x-x_c)\f$.
      - `distribution-name` is `Constant`
      - `[distribution-parameters]` are `value`
         - `value` is \f$x_c\f$.
      - Implemented by the class ConstantDistribution.

   - Uniform distribution: \f$ P(x) = 1/(b-a) \f$ for \f$a\le x \le b\f$.
      - `distribution-name` is `Uniform`
      - `[distribution-parameters]` are `lower upper`
         - `lower` is \f$a\f$.
         - `upper` is \f$b\f$.
      - Implemented by the class UniformDistribution.

   - Normal distribution: \f$ P(x) = (2\pi \sigma^2)^{-1/2} \exp\left[ - (x-x_0)^2 / (2 \sigma^2) \right] \f$.
      - `distribution-name` is `Normal` or `Gaussian`
      - `[distribution-parameters]` are `average stdev`
         - `average` is \f$ x_0 \f$.
         - `stdev` is \f$\sigma\f$.
      - Implemented by the class NormalDistribution.

   - Lognormal distribution: \f$ P(x) = \frac{1}{x \sqrt{2\pi \sigma^2}} \exp\left[ - \frac{(\ln(x) - \zeta)^2}{2\sigma^2} \right] \f$.
      - `distribution-name` is `Lognormal`
      - `[distribution-parameters]` are `zeta sigma`
         - `zeta` is \f$ \zeta \f$, the mean (in log-space).
         - `sigma` is \f$\sigma\f$, the standard deviation (in log-space).
      - Implemented by the class LognormalDistribution.

	- Gamma distribution: \f$ P(x) = \frac{1}{\Gamma(a) b^a} x^{a-1} e^{-x/b} \f$.
      - `distribution-name` is `Gamma`
      - `[distribution-parameters]` are `a b`
         - `a` is \f$ a \f$, the shape factor.
         - `b` is \f$b\f$, the scale factor.
      - Implemented by the class GammaDistribution.

\todo Implement the gamma distribution.

\subsection add_rnd_subsec Adding Random Distributions
Random number distributions are computationally described by the
RandomDistribution class. Adding a new random number distribution requires
a class derived from RandomDistribution that implements the `sample` function.
This function takes in a `gsl_rng` construct from GSL and returns a random
number from the distribution.

Finally, the new random number distribution needs to be added to the
::distribution_from_tokens function so that it is processed. In this function,
the `distribution` tag for the input deck is defined and the code for
processing `[distribution-parameters]` is implemented. The distributions
listed above should provide sufficient examples. Note that the name of the
distribution should be in lowercase.

\section sec_models Implemented Conductance Models
Finally, we list the implemented conductance models. Note that all of these
models are implemented by classes derived from ConductanceModel. Each of these
classes encapsulates not only the mathematical relationships described herein,
but also the random number distributions for the various model parameters. The
three abstract functions in ConductanceModel --
ConductanceModel::zero_bias_conductance, ConductanceModel::diff_conductance,
and ConductanceModel::static_conductance -- all generate a random set of model
parameters (from the distributions) and calculate the appropriate conductance.

- `SymmetricOneSiteModel`
   - Single-site model with symmetric site/lead couplings.
   - Implemented by the class SymmetricOneSiteModel; full details are presented
     there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling.

- `AsymmetricOneSiteModel`
   - Single-site model with asymmetric site/lead couplings.
   - Implemented by the class AsymmetricOneSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gammaL` (\f$\Gamma_\mathrm{L}\f$), the site/lead coupling for one electrode,
      - `gammaR` (\f$\Gamma_\mathrm{R}\f$), the site/lead coupling for the other electrode.

- `SymmetricVoltageOneSiteModel`
   - Single-site model with symmetric site/lead couplings and a voltage-dependent site-energy. It is very closely related to the SymmetricOneSiteModel above.
   - Implemented by the class SymmetricVoltageOneSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling.

- `SymmetricTwoSiteModel`
   - Two-site model with symmetric site/lead couplings.
   - Implemented by the class SymmetricTwoSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling,
      - `beta` (\f$\beta\f$), the inter-site coupling.

- `AsymmetricTwoSiteModel`
   - Two-site model with asymmetric site/lead couplings.
   - Implemented by the class AsymmetricTwoSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gammaL` (\f$\Gamma_\mathrm{L}\f$), the site/lead coupling for one electrode,
      - `gammaR` (\f$\Gamma_\mathrm{R}\f$), the site/lead coupling for the other electrode,
      - `beta` (\f$\beta\f$), the inter-site coupling.

- `SymmetricVoltageTwoSiteModel`
   - Two-site model with symmetric site/lead couplings and voltage-dependent site-energies.
   - Implemented by the class SymmetricVoltageTwoSiteModel; full details are
     presented there.
   - Model parameters are
      - `epsilon` (\f$\varepsilon\f$), the site-energy,
      - `gamma` (\f$\Gamma\f$), the site/lead coupling,
      - `beta` (\f$\beta\f$), the inter-site coupling.

\subsection add_conductance_model_subsec Adding Conductance Models
Adding a conductance model is designed to be straightforward, requiring the
following steps.
-# Derive a class from ConductanceModel, implementing the ConductanceModel::static_conductance, ConductanceModel::diff_conductance, and ConductanceModel::zero_bias_conductance member functions. As a side note, these three functions may use the transmission function, or other model-specific functions, which are implemented as static member functions of the derived class (as needed).
-# Add a case for the new model in the ::make_model function. This block of code should check that all necessary random number distributions are specified and properly route them to the ConductanceModel. Finally, the case returns a shared pointer to the ConductanceModel. The implemented cases should provide sufficient examples. Note that the name of the model should be in lowercase.
-# Add a note to the end of the ::make_model function so that (minimal) runtime support is present.
*/
